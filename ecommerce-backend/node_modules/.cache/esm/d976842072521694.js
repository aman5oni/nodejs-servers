let express,createProduct,updateProduct,getAllProducts,getProductDetails,deleteProduct,createProductReview,getProductReviews,deleteReview,isAuthenticatedUser,authorizeRoles;_725‍.x([["default",()=>_725‍.o]]);_725‍.w("express",[["default",["express"],function(v){express=v}]]);_725‍.w("../../controller/productController",[["createProduct",["createProduct"],function(v){createProduct=v}],["updateProduct",["updateProduct"],function(v){updateProduct=v}],["getAllProducts",["getAllProducts"],function(v){getAllProducts=v}],["getProductDetails",["getProductDetails"],function(v){getProductDetails=v}],["deleteProduct",["deleteProduct"],function(v){deleteProduct=v}],["createProductReview",["createProductReview"],function(v){createProductReview=v}],["getProductReviews",["getProductReviews"],function(v){getProductReviews=v}],["deleteReview",["deleteReview"],function(v){deleteReview=v}]]);_725‍.w("../../middleware/authentication",[["isAuthenticatedUser",["isAuthenticatedUser"],function(v){isAuthenticatedUser=v}],["authorizeRoles",["authorizeRoles"],function(v){authorizeRoles=v}]]);
















const productRoute = express.Router();

//Route Imports

productRoute.route("/products").get(getAllProducts);

productRoute
  .route("/admin/product/new")
  .post(isAuthenticatedUser, authorizeRoles("admin"), createProduct);

productRoute
  .route("/admin/product/:id")
  .put(isAuthenticatedUser, authorizeRoles("admin"), updateProduct)
  .delete(isAuthenticatedUser, authorizeRoles("admin"), deleteProduct);

productRoute.route("/product/:id").get(getProductDetails);

productRoute.route("/review").put(isAuthenticatedUser, createProductReview);

productRoute
  .route("/reviews")
  .get(getProductReviews)
  .delete(isAuthenticatedUser, deleteReview);

_725‍.d(productRoute);
