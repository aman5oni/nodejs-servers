let Order,asyncErrorHandler,Product,ErrorHandler;_29b‍.x([["newOrder",()=>newOrder],["getSingleOrder",()=>getSingleOrder],["myOrders",()=>myOrders],["getAllOrders",()=>getAllOrders],["updateOrder",()=>updateOrder],["deleteOrder",()=>deleteOrder]]);_29b‍.w("../../models/orderModel",[["Order",["Order"],function(v){Order=v}]]);_29b‍.w("../../middleware/catchAsyncErrors",[["default",["asyncErrorHandler"],function(v){asyncErrorHandler=v}]]);_29b‍.w("../../models/productModel",[["Product",["Product"],function(v){Product=v}]]);_29b‍.w("../../utils/errorHandler",[["default",["ErrorHandler"],function(v){ErrorHandler=v}]]);




//New Order

const newOrder = asyncErrorHandler(async (req, res, next) => {
  const {
    shippingInfo,
    orderItems,
    paymentInfo,
    itemsPrice,
    taxPrice,
    shippingPrice,
    totalPrice
  } = req.body;

  const order = await Order.create({
    shippingInfo,
    orderItems,
    paymentInfo,
    itemsPrice,
    taxPrice,
    shippingPrice,
    totalPrice,
    paidAt: Date.now(),
    user: req.user._id
  });

  res.status(201).json({
    success: true,
    statusCode: 201,
    order,
    message: "Order Created Sucessfully"
  });
});

const getSingleOrder = asyncErrorHandler(async (req, res, next) => {
  const order = await Order.findById(req.params.id).populate(
    "user",
    "name email"
  );

  if (!order) {
    return next(new ErrorHandler("Order not found with this Id", 404));
  }

  res.status(200).json({
    success: true,
    statusCode: 200,
    order,
    message: "Order Fetched SucessFully"
  });
});

// Get Logged In User Orders

const myOrders = asyncErrorHandler(async (req, res, next) => {
  const orders = await Order.find({ user: req.user._id });

  res.status(200).json({
    success: true,
    statusCode: 200,
    orders,
    message: "Your Orders Fetched"
  });
});

// Get All Orders -- Admin

const getAllOrders = asyncErrorHandler(async (req, res, next) => {
  const orders = await Order.find();

  let totalAmount = 0;

  orders.forEach((order) => {
    totalAmount += order.totalPrice;
  });

  res.status(200).json({
    success: true,
    statusCode: 200,
    totalAmount,
    orders,
    message: "All Orders Fetched Sucessfully"
  });
});

// Update Order Status -- Admin
const updateOrder = asyncErrorHandler(async (req, res, next) => {
  const order = await Order.findById(req.params.id);

  if (!order) {
    return next(new ErrorHandler("Order not found with this Id", 404));
  }

  if (order.orderStatus === "Delivered") {
    return next(new ErrorHandler("You have already delivered this order", 400));
  }

  if (req.body.status === "Shipped") {
    order.orderItems.forEach(async (o) => {
      await updateStock(o.product, o.quantity);
    });
  }
  order.orderStatus = req.body.status;

  if (req.body.status === "Delivered") {
    order.deliveredAt = Date.now();
  }

  await order.save({ validateBeforeSave: false });
  res.status(200).json({
    success: true,
    statusCode: 200,
    message: "Order Updated SucessFully"
  });
});

async function updateStock(id, quantity) {
  const product = await Product.findById(id);

  product.Stock -= quantity;

  await product.save({ validateBeforeSave: false });
}

// Delete Order -- Admin
const deleteOrder = asyncErrorHandler(async (req, res, next) => {
  const order = await Order.findById(req.params.id);

  if (!order) {
    return next(new ErrorHandler("Order not found with this Id", 404));
  }

  await order.remove();

  res.status(200).json({
    success: true,
    statusCode: 200,
    message: "Order Deleted Sucessfully"
  });
});









