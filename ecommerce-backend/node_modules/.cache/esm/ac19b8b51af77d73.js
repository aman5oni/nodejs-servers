let express,newOrder,getSingleOrder,myOrders,getAllOrders,updateOrder,deleteOrder,authorizeRoles,isAuthenticatedUser;_1af‍.x([["default",()=>_1af‍.o]]);_1af‍.w("express",[["default",["express"],function(v){express=v}]]);_1af‍.w("../../controller/orderController",[["newOrder",["newOrder"],function(v){newOrder=v}],["getSingleOrder",["getSingleOrder"],function(v){getSingleOrder=v}],["myOrders",["myOrders"],function(v){myOrders=v}],["getAllOrders",["getAllOrders"],function(v){getAllOrders=v}],["updateOrder",["updateOrder"],function(v){updateOrder=v}],["deleteOrder",["deleteOrder"],function(v){deleteOrder=v}]]);_1af‍.w("../../middleware/authentication",[["authorizeRoles",["authorizeRoles"],function(v){authorizeRoles=v}],["isAuthenticatedUser",["isAuthenticatedUser"],function(v){isAuthenticatedUser=v}]]);














const orderRoute = express.Router();

orderRoute.route("/order/new").post(isAuthenticatedUser, newOrder);

orderRoute.route("/order/:id").get(isAuthenticatedUser, getSingleOrder);

orderRoute.route("/orders/details").get(isAuthenticatedUser, myOrders);

orderRoute
  .route("/admin/orders")
  .get(isAuthenticatedUser, authorizeRoles("admin"), getAllOrders);

orderRoute
  .route("/admin/order/:id")
  .put(isAuthenticatedUser, authorizeRoles("admin"), updateOrder)
  .delete(isAuthenticatedUser, authorizeRoles("admin"), deleteOrder);

_1af‍.d(orderRoute);
