let ErrorHandler,asyncErrorHandler,jwt,JWT_PRIVATE_KEY,User;_b31‍.x([["isAuthenticatedUser",()=>isAuthenticatedUser],["authorizeRoles",()=>authorizeRoles]]);_b31‍.w("../../utils/errorHandler",[["default",["ErrorHandler"],function(v){ErrorHandler=v}]]);_b31‍.w("../catchAsyncErrors",[["default",["asyncErrorHandler"],function(v){asyncErrorHandler=v}]]);_b31‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_b31‍.w("../../config/appConfig",[["JWT_PRIVATE_KEY",["JWT_PRIVATE_KEY"],function(v){JWT_PRIVATE_KEY=v}]]);_b31‍.w("../../models/userModel",[["User",["User"],function(v){User=v}]]);





const isAuthenticatedUser = asyncErrorHandler(async (req, res, next) => {
  const { user } = req.cookies;

  if (!user) {
    return next(new ErrorHandler("Please Login To Access This Resource", 401));
  }

  const decodedData = jwt.verify(user, JWT_PRIVATE_KEY);
  req.user = await User.findById(decodedData.id);
  next();
  
});

const authorizeRoles = (...roles) => {
    
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return next(
        new ErrorHandler(
          `Role : ${req.user.role} Is Not Allowed To Access This Resource`,
          403
        )
      );
    }
    next();
  };
};


